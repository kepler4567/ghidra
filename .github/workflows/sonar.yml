name: SonarCloud Analysis (Ghidra Java Only)

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonar-analysis:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout do código
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2️⃣ Setup do Java
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 17

      # 3️⃣ Instalar sonar-scanner CLI (nova versão estável)
      - name: Install SonarScanner
        run: |
          mkdir -p $HOME/sonar-scanner
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-5.0.1.3006-linux.zip
          unzip sonar-scanner.zip -d $HOME/sonar-scanner
          export PATH=$HOME/sonar-scanner/sonar-scanner-5.0.1.3006-linux/bin:$PATH
          sonar-scanner --version

      # 4️⃣ Cache do SonarCloud
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # 5️⃣ Definir pastas Java (módulos multiplataforma do Ghidra)
      - name: Prepare Java source directories
        run: |
          export SONAR_SOURCES="Ghidra/Framework/GhidraFramework,Ghidra/Framework/SoftwareModeling,Ghidra/Framework/Utility,Ghidra/Features/Base,Ghidra/Features/BytePatterns,Ghidra/Features/FileFormats"
          echo "SONAR_SOURCES=$SONAR_SOURCES" >> $GITHUB_ENV

      # 6️⃣ Rodar SonarScanner diretamente (sem Gradle)
      - name: Run SonarScanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          export PATH=$HOME/sonar-scanner/sonar-scanner-5.0.1.3006-linux/bin:$PATH
          sonar-scanner \
            -Dsonar.projectKey=kepler4567_ghidra \
            -Dsonar.organization=kepler4567 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.sources=$SONAR_SOURCES \
            -Dsonar.java.binaries="" \
            -Dsonar.sourceEncoding=UTF-8
