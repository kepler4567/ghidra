name: SonarCloud Analysis (Ghidra Java Only)

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonar-analysis:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout do código
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2️⃣ Setup do Java
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 17

      # 3️⃣ Tentar compilar o projeto Ghidra
      - name: Build Ghidra
        run: |
          echo "Tentando compilar o Ghidra..."
          # Verificar se existe build.gradle ou outro arquivo de build
          if [ -f "build.gradle" ]; then
            ./gradlew classes --no-daemon || echo "Gradle build falhou, continuando sem binários"
          elif [ -f "pom.xml" ]; then
            mvn compile -DskipTests || echo "Maven build falhou, continuando sem binários"
          else
            echo "Nenhum sistema de build encontrado, procurando por scripts de build"
            find . -name "build.sh" -executable -exec {} \; || echo "Build script não encontrado ou falhou"
          fi

      # 4️⃣ Encontrar arquivos compilados
      - name: Find compiled classes
        id: find-classes
        run: |
          echo "Procurando por arquivos .class..."
          find . -name "*.class" -type f | head -20
          CLASSES_DIR=$(find . -type d -name "classes" | head -1 || echo "")
          BUILD_DIR=$(find . -type d -name "build" | head -1 || echo "")
          TARGET_DIR=$(find . -type d -name "target" | head -1 || echo "")
          
          if [ -n "$CLASSES_DIR" ]; then
            echo "classes_dir=$CLASSES_DIR" >> $GITHUB_OUTPUT
          elif [ -n "$BUILD_DIR" ]; then
            echo "classes_dir=$BUILD_DIR" >> $GITHUB_OUTPUT
          elif [ -n "$TARGET_DIR" ]; then
            echo "classes_dir=$TARGET_DIR" >> $GITHUB_OUTPUT
          else
            echo "classes_dir=" >> $GITHUB_OUTPUT
          fi

      # 5️⃣ Cache do SonarCloud
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # 6️⃣ Análise SonarCloud
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=kepler4567_ghidra
            -Dsonar.organization=kepler4567
            -Dsonar.sources=.
            -Dsonar.inclusions=**/*.java
            -Dsonar.exclusions=**/test/**,**/Test/**,**/tests/**,**/Tests/**,**/*Test.java,**/*Tests.java,**/build/**,**/target/**,**/out/**
            -Dsonar.java.binaries=${{ steps.find-classes.outputs.classes_dir }}
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.java.ignoreUnnamedModuleForSplitPackage=true
